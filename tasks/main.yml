---

- name: FAIL; check oauth2 variables when an oauth2 provider is selected
  fail:
    msg: "Auth class = {{ JH_AUTH_CLASS }} but one of JH_OAUTH2_CLIENT_ID, JH_OAUTH2_CLIENT_SECRET, or JH_OAUTH2_CALLBACK_URL is not defined "
  when: JH_AUTH_CLASS == "github" and (JH_OAUTH2_CLIENT_ID is not defined or JH_OAUTH2_CLIENT_ID == "" or JH_OAUTH2_CLIENT_SECRET is not defined or JH_OAUTH2_CLIENT_SECRET == "" or JH_OAUTH2_CALLBACK_URL is not defined or JH_OAUTH2_CALLBACK_URL is not defined == "")

- name: FAIL; check dummy password
  fail:
    msg: "JH_AUTH_CLASS is set to dummy but JH_DUMMY_PASS is not defined"
  when: JH_AUTH_CLASS == "dummy" and JH_DUMMY_PASS is not defined

- name: FILE; mkdir {{ JH_CONFIG_DIR }}
  file:
    path: "{{ JH_CONFIG_DIR }}"
    state: directory
    mode: 0755

- name: SHELL; generate an api key for dask auth
  shell: openssl rand -hex 32
  register: jh_api_key

- set_fact:
    JH_API_KEY: "{{ jh_api_key.stdout }}"

- name: TEMPLATE; install config.yaml to {{ JH_CONFIG_DIR }}
  template:
    src: config.yaml.j2
    dest: "{{ JH_CONFIG_DIR }}/config.yaml"

- name: TEMPLATE; install config_dask-gateway.yaml to {{ JH_CONFIG_DIR }}
  template:
    src: config_dask-gateway.yaml.j2
    dest: "{{ JH_CONFIG_DIR }}/config_dask-gateway.yaml"

- name: SHELL; locate k3s binary
  shell: command -v k3s
  register: k3s_found
  ignore_errors: true

- block:
  - name: SET_FACT; set jh_k3s_kubeconfig if k3s is found on host
    set_fact:
      jh_k3s_kubeconfig: "KUBECONFIG=/etc/rancher/k3s/k3s.yaml"

  - name: FILE; create {{ansible_env.HOME}}/.kube directory if necessary
    file:
      path: "{{ansible_env.HOME}}/.kube"
      state: directory

  - name: FILE; if k3s, link the k3s.yaml into {{ansible_env.HOME}}/.kube/config
    file:
      src: /etc/rancher/k3s/k3s.yaml
      dest: "{{ansible_env.HOME}}/.kube/config"
      state: link
  when: k3s_found is success

# for now, we'll assign the master nodes as the one with all the jupyterhub core components
- name: SHELL; kubectl label master nodes <name-name> hub.jupyter.org/node-purpose=core
  shell: "kubectl label nodes --overwrite --selector='node-role.kubernetes.io/master=true' hub.jupyter.org/node-purpose=core"

# and we'll assign worker nodes as one with all the jupyter notebooks
- name: SHELL; kubectl label worker nodes <name-name> hub.jupyter.org/node-purpose=user
  shell: "kubectl label nodes --overwrite --selector='!node-role.kubernetes.io/master' hub.jupyter.org/node-purpose=user"

- block:
  # - name: SHELL; kubectl label master nodes <name-name> hub.jupyter.org/dedicated=user:NoSchedule
  #   shell: "kubectl taint nodes --overwrite --selector='node-role.kubernetes.io/master=true' hub.jupyter.org/dedicated=user:NoSchedule"

  # - name: SHELL; kubectl label worker nodes <name-name> hub.jupyter.org/dedicated=user:NoSchedule
  #   shell: "kubectl taint nodes --overwrite --selector='!node-role.kubernetes.io/master' hub.jupyter.org/dedicated=core:NoSchedule"
  - name: SHELL; kubectl label master nodes <name-name> hub.jupyter.org/dedicated=core:NoSchedule
    shell: "kubectl taint nodes --overwrite --selector='node-role.kubernetes.io/master=true' hub.jupyter.org/dedicated=core:NoSchedule"

  - name: SHELL; kubectl label worker nodes <name-name> hub.jupyter.org/dedicated=user:NoSchedule
    shell: "kubectl taint nodes --overwrite --selector='!node-role.kubernetes.io/master' hub.jupyter.org/dedicated=user:NoSchedule"
  when: JH_SINGLEUSER_EXCLUDE_MASTER|bool

- name: SHELL; locate helm binary
  shell: command -v helm
  register: helm_found
  ignore_errors: true

- name: SHELL; install helm, if not found
  shell:
    cmd: curl https://raw.githubusercontent.com/helm/helm/HEAD/scripts/get-helm-3 | bash
  when: helm_found is failed

- name: SHELL; Add jupyterhub chart repo
  shell:
    cmd: helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/ ; helm repo update

- name: SHELL; install/upgrade jupyterhub
  shell:
   cmd: "{{ jh_k3s_kubeconfig | default('') }} helm upgrade --cleanup-on-fail --install jupyterhub jupyterhub/jupyterhub --version={{ JH_CHART_VERSION }} --namespace {{ JH_NAMESPACE }} --create-namespace --values {{ JH_CONFIG_DIR }}/config.yaml --timeout 20m"
  async: 1200

- name: SHELL; Add jupyterhub chart repo
  shell:
    cmd: helm repo add dask https://helm.dask.org/ ; helm repo update
  when: JH_INCLUDE_DASK|bool

- name: SHELL; install/upgrade dask-gateway
  shell:
    cmd: "{{ jh_k3s_kubeconfig | default('') }}  helm upgrade --install dask-gateway dask-gateway --repo=https://helm.dask.org  --create-namespace --namespace {{ DASK_NAMESPACE }} --values {{ JH_CONFIG_DIR }}/config_dask-gateway.yaml --version {{ DASK_CHART_VERSION }}"
  async: 1200
  when: JH_INCLUDE_DASK|bool
